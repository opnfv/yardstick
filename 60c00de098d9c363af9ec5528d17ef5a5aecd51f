{
  "comments": [
    {
      "key": {
        "uuid": "5ac10518_ec84a7d5",
        "filename": "tests/unit/benchmark/contexts/test_heat.py",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 1402
      },
      "writtenOn": "2017-01-09T07:44:59Z",
      "side": 1,
      "message": ", is deprecated use \u0027as\u0027.\n\n except OSError as e:\n    ...\n\n\nBut I really dislike these custom error messages that hide tracebacks.\n\nWhen debugging we really want tracebacks so we know what called this function.  Unittest are for developers, developers need tracebacks.\n\n  from __future__ import print_function\n\n  except OSError:\n     print(\"key_filename: \", e.key_filename)\n     raise\n\n\nor better is to just use logging everywhere, also logging goes to stderr.\n\n\n   except OSError:\n     LOG.exception(\"key_filename: %s\", e.key_filename)",
      "revId": "60c00de098d9c363af9ec5528d17ef5a5aecd51f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac10518_4c65bb43",
        "filename": "yardstick/benchmark/contexts/heat.py",
        "patchSetId": 2
      },
      "lineNbr": 251,
      "author": {
        "id": 1402
      },
      "writtenOn": "2017-01-09T07:44:59Z",
      "side": 1,
      "message": "we can use .format() with maximum width arg.\n\n                         \u0027files/yardstick_key-{:.{width}}.pub\u0027.format(\n                            key_uuid, width\u003d8)),",
      "revId": "60c00de098d9c363af9ec5528d17ef5a5aecd51f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac10518_2c62af3e",
        "filename": "yardstick/orchestrator/heat.py",
        "patchSetId": 2
      },
      "lineNbr": 309,
      "author": {
        "id": 1402
      },
      "writtenOn": "2017-01-09T07:44:59Z",
      "side": 1,
      "message": "Adding UUID is fine, but I just tested this code with Python 3 and there is a bug.  We have to decode the public key into unicode correctly so that JSON can serialize it.\n\nWe need to use the OpenStack standard  oslo_utils.encodeutils.safe_decode() method to convert the pkg_resource output into unicode so we can put the key into JSON.\n\n                # resource_string returns bytes, so we must decode to unicode\n                \u0027public_key\u0027: encodeutils.safe_decode(\n                    pkg_resources.resource_string(\n                        \u0027yardstick.resources\u0027,\n                        \u0027files/yardstick_key-{:.{width}}.pub\u0027.format(\n                            key_uuid, width\u003d8)),\n                    \u0027utf-8\u0027)\n\n\nhttps://wiki.openstack.org/wiki/Python3#safe_decode\n\n\nPython3 JSON TypeError caused by not decoding:\n\n\nDeploying context \u0027demo\u0027\n...\n  File \"/home/rbbratta/yardstick/yardstick/yardstick/benchmark/core/task.py\", line 106, in _run\n    context.deploy()\n  File \"/home/rbbratta/yardstick/yardstick/yardstick/benchmark/contexts/heat.py\", line 206, in deploy\n    self.stack \u003d heat_template.create()\n  File \"/home/rbbratta/yardstick/yardstick/yardstick/orchestrator/heat.py\", line 433, in create\n    json_template \u003d json.dumps(self._template)\n  File \"/usr/lib/python3.5/json/__init__.py\", line 230, in dumps\n    return _default_encoder.encode(obj)\n  File \"/usr/lib/python3.5/json/encoder.py\", line 198, in encode\n    chunks \u003d self.iterencode(o, _one_shot\u003dTrue)\n  File \"/usr/lib/python3.5/json/encoder.py\", line 256, in iterencode\n    return _iterencode(o, 0)\n  File \"/usr/lib/python3.5/json/encoder.py\", line 179, in default\n    raise TypeError(repr(o) + \" is not JSON serializable\")\nTypeError: b\u0027ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZS5MIpYJEAQmY76z3pWDvrcWHDVRMsXkTRSsLQig6iW3PE53jqBtNMPqVvdzRlqCDGsHt7ppnyy6MklARbo3XaeQhDyjJYBJ7yzLQkf93Race0ToyZ4riqaoZ6dF83dH9vihkO+HWvfmsEDqQezjaTyXANTnWdpycXHBCM+IBdg6th9Ejj3BvMg7zNEjjZeJCqABmo9Zdg3Tuf8ATnLrRXAng5MA6NlUGA661KpgiBdVA1sBRSXez1E0Kpms7bDjk76dw6i7y5p\njZXAMy0tmAr8FWzn8OyOSLeVqrHqKoKJyDcsO0tb83iAVccaXauuxKG3CgQcDdK9T7g44hS9h9\\n\u0027 is not JSON serializable",
      "revId": "60c00de098d9c363af9ec5528d17ef5a5aecd51f",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    }
  ]
}