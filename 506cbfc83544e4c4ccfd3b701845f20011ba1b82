{
  "comments": [
    {
      "key": {
        "uuid": "5aaae553_62d6c6c7",
        "filename": "yardstick/benchmark/core/task.py",
        "patchSetId": 1
      },
      "lineNbr": 391,
      "author": {
        "id": 1402
      },
      "writtenOn": "2017-06-03T00:56:50Z",
      "side": 1,
      "message": "I don\u0027t think we want to do it this way.  It depends what info we need.\n\nAlso we do pass scenario_cfg and context_cfg to the scenario __init__()",
      "revId": "506cbfc83544e4c4ccfd3b701845f20011ba1b82",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5aaae553_8d8f7323",
        "filename": "yardstick/benchmark/core/task.py",
        "patchSetId": 1
      },
      "lineNbr": 391,
      "author": {
        "id": 6507
      },
      "writtenOn": "2017-06-05T06:23:13Z",
      "side": 1,
      "message": "context_cfg data is extracted from scenario data. That is why i added the context info into scenario hash.\n\nPlease check run_one_scenario function in task.py. Do you think it will be good idea to add into node (podfile?)",
      "parentUuid": "5aaae553_62d6c6c7",
      "revId": "506cbfc83544e4c4ccfd3b701845f20011ba1b82",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5aaae553_4db09bdd",
        "filename": "yardstick/benchmark/core/task.py",
        "patchSetId": 1
      },
      "lineNbr": 391,
      "author": {
        "id": 1402
      },
      "writtenOn": "2017-06-05T07:38:21Z",
      "side": 1,
      "message": "We aren\u0027t supposed to access context_cfgs info directly.\n\nWe access context info via Context.get_server().  \n\nBut we need a clear problem statement.  And one that doesn\u0027t assume baremetal.\n\nIf we need hardware info about the node, then it is best to probe the node directly.\n\nIf we need hardware info about the hypervisor, then we need to query the Context object.  Because with Heat we won\u0027t know the hypervisor location until the node is deployed.\n\nIn either case, the info we need won\u0027t be in the context_cfgs.  It will be in the Context object.\n\nIt may be that the best course is to add a Context.get_context_for_server(self.name) method\n\n    @staticmethod\n    def get_context_for_server(attr_name):\n        \"\"\"lookup server info by name from context\n        attr_name: either a name for a server created by yardstick or a dict\n        with attribute name mapping when using external heat templates\n        \"\"\"\n        con \u003d (context for context in Context.list if context._get_server(attr_name))\n        try:\n            return next(con)\n        except StopIteration:\n            raise ValueError(\"context not found for server \u0027%r\u0027\" %\n                             attr_name)\n\nmethod that returns the Context instance for a node.",
      "parentUuid": "5aaae553_8d8f7323",
      "revId": "506cbfc83544e4c4ccfd3b701845f20011ba1b82",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5aaae553_edc0672c",
        "filename": "yardstick/benchmark/core/task.py",
        "patchSetId": 1
      },
      "lineNbr": 391,
      "author": {
        "id": 1402
      },
      "writtenOn": "2017-06-05T07:44:07Z",
      "side": 1,
      "message": "and we might be able to use Context.get_context_for_server(name) for scale-out, scale-up as well, because if we can get the Context instance we can add methods to have the context dynamically scale, adding instances or maybe adding resources.",
      "parentUuid": "5aaae553_4db09bdd",
      "revId": "506cbfc83544e4c4ccfd3b701845f20011ba1b82",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    }
  ]
}