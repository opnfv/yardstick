# Copyright (c) 2019 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{% set vports = get(extra_args, 'vports', 2) %}
---
schema: "nsb:traffic_profile:0.1"

# This file is a template, it will be filled with values from tc.yaml before passing to the traffic generator

name:            rfc2544
description:     Traffic profile to run RFC2544 latency
traffic_profile:
  traffic_type : IXIARFC2544Profile # defines traffic behavior - constant or look for highest possible throughput
  frame_rate : 100%  # pc of linerate
  duration: {{ duration }}
  enable_latency: True

{% for vport in range((vports / 2)|int) %}
uplink_{{vport}}:
      ipv4:
        id: {{ (vport * 2) + 1 }}
        outer_l2:
            framesize:
                64B: "{{get(imix, 'imix.uplink.64B', '0') }}"
                128B: "{{get(imix, 'imix.uplink.128B', '0') }}"
                256B: "{{get(imix, 'imix.uplink.256B', '0') }}"
                373b: "{{get(imix, 'imix.uplink.373B', '0') }}"
                512B: "{{get(imix, 'imix.uplink.512B', '0') }}"
                570B: "{{get(imix, 'imix.uplink.570B', '0') }}"
                1024B: "{{get(imix, 'imix.uplink.1024B', '0') }}"
                1280B: "{{get(imix, 'imix.uplink.1280B', '0') }}"
                1400B: "{{get(imix, 'imix.uplink.1400B', '0') }}"
                1500B: "{{get(imix, 'imix.uplink.1500B', '0') }}"
                1518B: "{{get(imix, 'imix.uplink.1518B', '0') }}"

        outer_l3v4:
            proto: "udp"
            srcip4: "{{ get(flow, 'flow.src_ip_%s'| format(vport), '1.%s.1.1-1.%s.255.255'| format(vport, vport)) }}"
            dstip4: "{{ get(flow, 'flow.dst_ip_%s'| format(vport), '90.%s.1.1-90.%s.255.255'| format(vport, vport)) }}"
            count: "{{ get(flow, 'flow.count', '1') }}"
            srcseed: "{{get(flow, 'flow.srcseed', '1') }}"
            dstseed: "{{get(flow, 'flow.dstseed', '1') }}"
            ttl: 32
            dscp: 0
        outer_l4:
            srcport: "{{ get(flow, 'flow.src_port_%s'| format(vport), '1234-4321') }}"
            dstport: "{{ get(flow, 'flow.dst_port_%s'| format(vport), '2001-4001') }}"
            count: "{{get(flow, 'flow.count', '1') }}"
            seed: "{{get(flow, 'flow.seed', '1') }}"
downlink_{{vport}}:
      ipv4:
        id: {{ (vport * 2) + 2 }}
        outer_l2:
            framesize:
                64B: "{{get(imix, 'imix.downlink.64B', '0') }}"
                128B: "{{get(imix, 'imix.downlink.128B', '0') }}"
                256B: "{{get(imix, 'imix.downlink.256B', '0') }}"
                373b: "{{get(imix, 'imix.downlink.373B', '0') }}"
                512B: "{{get(imix, 'imix.downlink.512B', '0') }}"
                570B: "{{get(imix, 'imix.downlink.570B', '0') }}"
                1024B: "{{get(imix, 'imix.downlink.1024B', '0') }}"
                1280B: "{{get(imix, 'imix.downlink.1280B', '0') }}"
                1400B: "{{get(imix, 'imix.downlink.1400B', '0') }}"
                1500B: "{{get(imix, 'imix.downlink.1500B', '0') }}"
                1518B: "{{get(imix, 'imix.downlink.1518B', '0') }}"

        outer_l3v4:
            proto: "udp"
            srcip4: "{{ get(flow, 'flow.src_ip_%s'| format(vport), '1.%s.1.1-1.%s.255.255'| format(vport, vport)) }}"
            dstip4: "{{ get(flow, 'flow.dst_ip_%s'| format(vport), '90.%s.1.1-90.%s.255.255'| format(vport, vport)) }}"
            {% if get(flow, 'flow.public_ip_%s'| format(vport)) is defined %}
            dstip4: "{{get(flow, 'flow.public_ip_%s'| format(vport), '90.90.1.1-90.105.255.255') }}"
            {% endif %}
            count: "{{get(flow, 'flow.count', '1') }}"
            srcseed: "{{get(flow, 'flow.srcseed', '1') }}"
            dstseed: "{{get(flow, 'flow.dstseed', '1') }}"
            ttl: 32
            dscp: 0
        outer_l4:
            srcport: "{{ get(flow, 'flow.dst_port_%s'| format(vport), '1234-4321') }}"
            dstport: "{{ get(flow, 'flow.src_port_%s'| format(vport), '2001-4001') }}"
            count: "{{get(flow, 'flow.count', '1') }}"
            seed: "{{get(flow, 'flow.seed', '1') }}"
{% endfor %}
