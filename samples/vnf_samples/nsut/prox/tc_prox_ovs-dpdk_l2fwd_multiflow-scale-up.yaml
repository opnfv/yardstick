# Copyright (c) 2018-2019 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{% set vports = vports or 2 %}
---
schema: "yardstick:task:0.1"

scenarios:
-
  type: NSPerf
  traffic_profile: ../../traffic_profiles/prox_binsearch.yaml
  extra_args:
    vports: {{ vports }}
  topology: prox-tg-topology-scale-up.yaml

  nodes:
    tg__0: tg__0.yardstick
    vnf__0: vnf__0.yardstick

  options:
    interface_speed_gbps: 10

    vnf__0:
      prox_path: /opt/nsb_bin/prox
      prox_config: "configs/handle_l2fwd_multiflow-{{ vports }}.cfg"
      prox_args:
        "-t": ""

    tg__0:
      prox_path: /opt/nsb_bin/prox
      prox_config: "configs/gen_l2fwd_multiflow-{{ vports }}.cfg"
      prox_args:
        "-e": ""
        "-t": ""

  runner:
    type: Duration
    # we kill after duration, independent of test duration, so set this high
    duration: 600

contexts:
   - name: yardstick
     type: Node
     file: prox_tg_bm.yaml
   - name: yardstick
     type: StandaloneOvsDpdk
     file: /etc/yardstick/nodes/standalone/host_ovs.yaml
     vm_deploy: True
     ovs_properties:
       version:
         ovs: 2.8.0
         dpdk: 17.05.2
       pmd_threads: 2
       ram:
         socket_0: 2048
         socket_1: 2048
       queues: 4
       vpath: "/usr/local"
     flavor:
       images: "/var/lib/libvirt/images/yardstick-nsb-image.img"
       ram: 16384
       extra_specs:
         hw:cpu_sockets: 1
         hw:cpu_cores: 10
         hw:cpu_threads: 2
     servers:
       vnf__0:
         network_ports:
           mgmt:
             cidr: '1.1.1.62/24'
{% for port_num in range((vports/2)|int) %}
           xe{{ port_num * 2 }}:
             - uplink_{{ port_num }}
           xe{{ (port_num * 2) + 1 }}:
             - downlink_{{ port_num }}
{% endfor %}
     networks:
{% for port_num in range((vports/2)|int) %}
       uplink_{{ port_num }}:
         port_num: {{ networks.uplink[port_num].port_num }}
         phy_port: "{{ networks.uplink[port_num].phy_port }}"
         vpci: "{{ networks.uplink[port_num].vpci }}"
         cidr: "{{ networks.uplink[port_num].cidr }}"
         gateway_ip: "{{ networks.uplink[port_num].gateway_ip }}"
       downlink_{{ port_num }}:
         port_num: {{ networks.downlink[port_num].port_num }}
         phy_port: "{{ networks.downlink[port_num].phy_port }}"
         vpci: "{{ networks.downlink[port_num].vpci }}"
         cidr: "{{ networks.downlink[port_num].cidr }}"
         gateway_ip: "{{ networks.downlink[port_num].gateway_ip }}"
{% endfor %}
