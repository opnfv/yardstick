#!/bin/bash
##############################################################################
# Copyright (c) 2015 Ericsson AB and others.
#
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################

#
# Set up the environment and run yardstick test suites.
#
# Example invocation: yardstick-verify -r 10.4.4.4 suite1.yaml suite2.yaml
#
# Openstack credentials must be set and the script must be run from its
# original location in the yardstick repo.
#
# This script is intended to be used by the CI pipeline but it may also
# be invoked manually.
#

SCRIPT=$0
SCRIPT_ARGS=$@

usage()
{
    cat << EOF
usage: $0 options [TEST_SUITE ...]

If no test suites are given ping.yaml is run.

OPTIONS:
   -h      Show this message
   -r      IP address for Result API.
           Default is to store the results to file ($DISPATCHER_FILE_NAME)
           if this option is not present.

EOF
}

DISPATCHER_TYPE=file
DISPATCHER_FILE_NAME="/tmp/yardstick.out"
DISPATCHER_HTTP_TARGET=

while getopts "r:h" OPTION; do
    case $OPTION in
        h)
            usage
            exit 0
            ;;
        r)
            DISPATCHER_TYPE=http
            DISPATCHER_HTTP_TARGET=http://${OPTARG}/results
            ;;
        *)
            echo "${OPTION} is not a valid argument"
            exit 1
            ;;
    esac
done

shift $[OPTIND - 1]
TEST_SUITES=$@

cleanup()
{
    echo
    echo "========== Cleanup =========="

    if ! glance image-list; then
        return
    fi

    for image in $(glance image-list | grep -e cirros-0.3.3 -e yardstick-trusty-server | awk '{print $2}'); do
        echo "Deleting image $image..."
        glance image-delete $image || true
    done
}

exitcode=""

error_exit()
{
    local rc=$?

    if [ -z "$exitcode" ]; then
        # In case of recursive traps (!?)
        exitcode=$rc
    fi

    cleanup

    echo "Exiting with RC=$exitcode"

    exit $exitcode
}

set -o errexit
set -o pipefail

install_yardstick()
{
    echo
    echo "========== Installing yardstick =========="

    if ! sudo python setup.py install; then
        echo 'Yardstick installation failed!'
        exit 1
    fi
}

build_yardstick_image()
{
    echo
    echo "========== Build yardstick cloud image =========="

    sudo $(which yardstick-img-modify) $(pwd)/tools/ubuntu-server-cloudimg-modify.sh
    if [ ! -f $QCOW_IMAGE ]; then
        echo "Failed building QCOW image"
        exit 1
    fi
}

load_cirros_image()
{
    echo
    echo "========== Loading cirros cloud image =========="

    local image_file=

    wget http://download.cirros-cloud.net/0.3.3/cirros-0.3.3-x86_64-disk.img -O /tmp/cirros.img

    output=$(glance image-create \
        --name  cirros-0.3.3 \
        --disk-format qcow2 \
        --container-format bare \
        --file /tmp/cirros.img)
    echo "$output"

    CIRROS_IMAGE_ID=$(echo "$output" | grep " id " | awk '{print $(NF-1)}')
    if [ -z "$CIRROS_IMAGE_ID" ]; then
        echo 'Failed uploading cirros image to cloud'.
        exit 1
    fi

    echo "Cirros image id: $CIRROS_IMAGE_ID"
}

load_yardstick_image()
{
    echo
    echo "========== Loading yardstick cloud image =========="

    output=$(glance --os-image-api-version 1 image-create \
        --name yardstick-trusty-server \
        --is-public true --disk-format qcow2 \
        --container-format bare \
        --file $QCOW_IMAGE)
    echo "$output"

    GLANCE_IMAGE_ID=$(echo "$output" | grep " id " | awk '{print $(NF-1)}')

    if [ -z "$GLANCE_IMAGE_ID" ]; then
        echo 'Failed uploading image to cloud'.
        exit 1
    fi

    sudo rm -f $QCOW_IMAGE

    echo "Glance image id: $GLANCE_IMAGE_ID"
}

run_test()
{
    echo
    echo "========== Running yardstick test suites =========="

    mkdir -p /etc/yardstick

    cat << EOF >> /etc/yardstick/yardstick.conf
[DEFAULT]
debug = True
dispatcher = ${DISPATCHER_TYPE}

[dispatcher_file]
file_name = ${DISPATCHER_FILE_NAME}

[dispatcher_http]
timeout = 5
target = ${DISPATCHER_HTTP_TARGET}
EOF

    local failed=0

    if [ ${#SUITE_FILES[@]} -gt 0 ]; then

        for suite in ${SUITE_FILES[*]}; do

            echo "---------------------------"
            echo "Running test suite: $suite"
            echo "---------------------------"

             if ! yardstick task start --suite $suite; then
                 echo "test suite $suite FAILED";

                 # Mark the test suite failed but continue
                 # running the remaining test suites.
                 (( failed++ ))
             fi

         done

         if [ $failed -gt 0 ]; then

             echo "---------------------------"
             echo "$failed out of ${SUITE_FILES[*]} test suites FAILED"
             echo "---------------------------"
             exit 1
         fi

    else

        echo "---------------------------"
        echo "Running samples/ping.yaml  "
        echo "---------------------------"

        if ! yardstick task start samples/ping.yaml; then
            echo "Yardstick test FAILED"
            exit 1
        fi

    fi

}

main()
{
    GITROOT=$(cd $(dirname $0) && git rev-parse --show-toplevel)

    cd $GITROOT

    export YARDSTICK_VERSION=$(git rev-parse HEAD)

    SUITE_FILES=()

    # find the test suite files
    for suite in $TEST_SUITES; do
        if [ -f $suite ]; then
            SUITE_FILES+=($suite)
        else
            tsdir=$GITROOT/tests/opnfv/test_suites
            if [ ! -f $tsdir/$suite ]; then
                echo "Test suite \"$suite\" does not exist"
                exit 1
            fi
            SUITE_FILES+=($tsdir/$suite)
        fi
    done

    echo
    echo "========== Running Yardstick CI with following parameters =========="
    echo "Script options: ${SCRIPT} $SCRIPT_ARGS"
    echo "Result API: ${DISPATCHER_HTTP_TARGET:-$DISPATCHER_FILE_NAME}"
    echo "YARDSTICK_VERSION: ${YARDSTICK_VERSION}"
    echo "Number of test suites: ${#SUITE_FILES[@]}"
    for suite in ${SUITE_FILES[*]}; do
        echo "     $suite"
    done

    # install yardstick
    install_yardstick

    # check if some necessary variables is set
    if [ -z "$OS_AUTH_URL" ]; then
        echo "OS_AUTH_URL is unset or empty"
        exit 1
    fi

    # check if the api is up
    echo "Checking if OS API is working..."
    if ! glance image-list > /dev/null; then
        echo "OS API is down"
        exit 1
    fi

    cleanup

    trap "error_exit" EXIT SIGTERM

    QCOW_IMAGE="/tmp/workspace/yardstick/yardstick-trusty-server.img"

    build_yardstick_image
    load_yardstick_image
    load_cirros_image

    run_test
}

main
