{
  "comments": [
    {
      "key": {
        "uuid": "9a3d3df0_5df8f848",
        "filename": "yardstick/network_services/utils.py",
        "patchSetId": 5
      },
      "lineNbr": 60,
      "author": {
        "id": 6831
      },
      "writtenOn": "2017-12-12T22:01:12Z",
      "side": 1,
      "message": "we don\u0027t need the multiple patterns, the following passes the unit tests as written:\n\n    PCI_PATTERN_STR \u003d (\n        r\"((?P\u003cdomain\u003e[0-9a-zA-Z]{4}):)?(?P\u003cbus\u003e[0-9a-zA-Z]{2}):\"\n        r\"(?P\u003cslot\u003e[0-9a-zA-Z]{2})\\.(?P\u003cfunction\u003e[0-9a-zA-Z]{1})\")\n\n    PCI_ADDRESS_FORMAT \u003d \u0027{0.domain}:{0.bus}:{0.slot}.{0.function}\u0027\n\n    @staticmethod\n    def fix_width(value, width):\n        return \u0027{:0\u003e{}}\u0027.format(value, width)[:width]\n\n    def __init__(self, address):\n        pci_pattern \u003d re.compile(self.PCI_PATTERN_STR)\n        match \u003d pci_pattern.search(address)\n\n        if not match:\n            raise ValueError(\u0027Invalid PCI address: {}\u0027.format(address))\n\n        match_dict \u003d match.groupdict(\u00270000\u0027)\n        self._domain \u003d self.fix_width(match_dict.get(\u0027domain\u0027).lower(), 4)\n        self._bus \u003d self.fix_width(match.group(\u0027bus\u0027).lower(), 2)\n        self._slot \u003d self.fix_width(match.group(\u0027slot\u0027).lower(), 2)\n        self._function \u003d self.fix_width(match.group(\u0027function\u0027).lower(), 1)\n        self.address \u003d self.PCI_ADDRESS_FORMAT.format(self)\n        self.match \u003d match\n\nif we want to keep the other patterns, that\u0027s fine, but we don\u0027t need them.\n\nif you want don\u0027t like the groupdict, then we could name the optional domain portion and use that to determine domain:\n\n    PCI_PATTERN_STR \u003d (\n        r\"(?P\u003chas_domain\u003e(?P\u003cdomain\u003e[0-9a-zA-Z]{4}):)?\"\n        r\"(?P\u003cbus\u003e[0-9a-zA-Z]{2}):\"\n        r\"(?P\u003cslot\u003e[0-9a-zA-Z]{2})\\.(?P\u003cfunction\u003e[0-9a-zA-Z]{1})\")\n    ...\n    def __init__(self, address):\n        ...\n        self._domain \u003d (self.fix_width(match.group(\u0027domain\u0027).lower(), 4)\n                        if match.group(\u0027has_domain\u0027) else \u00270000\u0027)",
      "revId": "3ed554682a506c2cdcf8cf3d53ec213a9cf6ba38",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_d816d654",
        "filename": "yardstick/network_services/utils.py",
        "patchSetId": 5
      },
      "lineNbr": 60,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-12-13T09:01:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a3d3df0_5df8f848",
      "revId": "3ed554682a506c2cdcf8cf3d53ec213a9cf6ba38",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_9dcba01d",
        "filename": "yardstick/network_services/utils.py",
        "patchSetId": 5
      },
      "lineNbr": 83,
      "author": {
        "id": 6831
      },
      "writtenOn": "2017-12-12T21:14:43Z",
      "side": 1,
      "message": "good point, though i might move this to the True portion of the conditional operator:\n\n (match.group(\u0027domain\u0027).lower() if \u0027domain\u0027 in match.groupdict() else \u00270000\u0027)\n\nsince we know \u00270000\u0027 is already lower case.",
      "range": {
        "startLine": 83,
        "startChar": 36,
        "endLine": 83,
        "endChar": 44
      },
      "revId": "3ed554682a506c2cdcf8cf3d53ec213a9cf6ba38",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_380d423f",
        "filename": "yardstick/network_services/utils.py",
        "patchSetId": 5
      },
      "lineNbr": 83,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-12-13T09:01:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a3d3df0_9dcba01d",
      "range": {
        "startLine": 83,
        "startChar": 36,
        "endLine": 83,
        "endChar": 44
      },
      "revId": "3ed554682a506c2cdcf8cf3d53ec213a9cf6ba38",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    }
  ]
}