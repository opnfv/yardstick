{
  "comments": [
    {
      "key": {
        "uuid": "9a3d3df0_13b193e1",
        "filename": "tests/unit/network_services/vnf_generic/vnf/test_vfw_vnf.py",
        "patchSetId": 11
      },
      "lineNbr": 336,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "Consistency: \u0027 or \"",
      "range": {
        "startLine": 336,
        "startChar": 16,
        "endLine": 336,
        "endChar": 17
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_f3b50fce",
        "filename": "tests/unit/network_services/vnf_generic/vnf/test_vfw_vnf.py",
        "patchSetId": 11
      },
      "lineNbr": 340,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "When something is mocked, there should be a check to find out how it was called.",
      "range": {
        "startLine": 340,
        "startChar": 36,
        "endLine": 340,
        "endChar": 38
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_7390dfec",
        "filename": "tests/unit/network_services/vnf_generic/vnf/test_vfw_vnf.py",
        "patchSetId": 11
      },
      "lineNbr": 340,
      "author": {
        "id": 6831
      },
      "writtenOn": "2017-10-24T18:23:56Z",
      "side": 1,
      "message": "while i see the advantage of this in general, i fear that the unit tests become too implementation-specific, too \"white-box/clear-box\".\n\nnotice there are four mocks before entering the test and there are three more defined within the test, that\u0027s seven mocks to test and five of them are class instances that may have many member methods called.\n\ni also don\u0027t see the point of testing the mocking of time modules as they are used for sleeping in our code and we don\u0027t want to wait during unit tests.",
      "parentUuid": "9a3d3df0_f3b50fce",
      "range": {
        "startLine": 340,
        "startChar": 36,
        "endLine": 340,
        "endChar": 38
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_931da369",
        "filename": "yardstick/benchmark/contexts/base.py",
        "patchSetId": 11
      },
      "lineNbr": 27,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "sep \u003d sep or \u0027.\u0027\n\nAnyway, a string in Python is unmutable so it could be set as the default value of a function argument. IMO, this change is unnecesary.",
      "range": {
        "startLine": 26,
        "startChar": 8,
        "endLine": 27,
        "endChar": 21
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_53b03b8b",
        "filename": "yardstick/benchmark/contexts/base.py",
        "patchSetId": 11
      },
      "lineNbr": 27,
      "author": {
        "id": 6831
      },
      "writtenOn": "2017-10-24T18:23:56Z",
      "side": 1,
      "message": "my reason for the change was that it is easier to use None as \"give me the default value\" than guessing at the default value, for methods that are written to use a method like this but expose the separator argument to their users.\n\neven with \u0027.\u0027 as the default value, None could still be passed in and i would be inclined to replace None with the default value, so we could leave L25 as it was, but L26-27 should be added.",
      "parentUuid": "9a3d3df0_931da369",
      "range": {
        "startLine": 26,
        "startChar": 8,
        "endLine": 27,
        "endChar": 21
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_d32c4b4d",
        "filename": "yardstick/benchmark/contexts/base.py",
        "patchSetId": 11
      },
      "lineNbr": 53,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "operator1 \u003d not_contains if invert else operator.contains",
      "range": {
        "startLine": 50,
        "startChar": 7,
        "endLine": 53,
        "endChar": 41
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_93812392",
        "filename": "yardstick/benchmark/contexts/base.py",
        "patchSetId": 11
      },
      "lineNbr": 53,
      "author": {
        "id": 6831
      },
      "writtenOn": "2017-10-24T18:23:56Z",
      "side": 1,
      "message": "for what it\u0027s worth, such a change would mean two fewer statements and one less branch to cover.  we still need two unit tests to cover both cases, but one unit test would be enough to satisfy the coverage requirement.\n\nwhile i don\u0027t agree, i\u0027ve been told that the conditional operator is hard to read/understand.",
      "parentUuid": "9a3d3df0_d32c4b4d",
      "range": {
        "startLine": 50,
        "startChar": 7,
        "endLine": 53,
        "endChar": 41
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_1327d365",
        "filename": "yardstick/benchmark/contexts/base.py",
        "patchSetId": 11
      },
      "lineNbr": 55,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "Is this logic correct?\n\nThis will try to find \"str(node.get(\u0027role\u0027, \u0027\u0027))\" in \"node_role_set\".",
      "range": {
        "startLine": 55,
        "startChar": 52,
        "endLine": 55,
        "endChar": 91
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_b331c7a4",
        "filename": "yardstick/benchmark/contexts/base.py",
        "patchSetId": 11
      },
      "lineNbr": 55,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "length \u003e 79",
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_53d15bfa",
        "filename": "yardstick/benchmark/contexts/base.py",
        "patchSetId": 11
      },
      "lineNbr": 55,
      "author": {
        "id": 1402
      },
      "writtenOn": "2017-10-24T15:06:03Z",
      "side": 1,
      "message": "there was a vote during last release to increase line length to 99.",
      "parentUuid": "9a3d3df0_b331c7a4",
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_338657ba",
        "filename": "yardstick/benchmark/contexts/base.py",
        "patchSetId": 11
      },
      "lineNbr": 55,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T16:49:46Z",
      "side": 1,
      "message": "Ok, but this is againts https://www.python.org/dev/peps/pep-0008/#maximum-line-length",
      "parentUuid": "9a3d3df0_53d15bfa",
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_33adb732",
        "filename": "yardstick/benchmark/contexts/base.py",
        "patchSetId": 11
      },
      "lineNbr": 55,
      "author": {
        "id": 1402
      },
      "writtenOn": "2017-10-24T17:10:05Z",
      "side": 1,
      "message": "sticking to 79 tended to trigger massive refactors to decrease indentation.\n\nbut maybe refactors are a good thing.",
      "parentUuid": "9a3d3df0_338657ba",
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_f32b4f2e",
        "filename": "yardstick/benchmark/contexts/node.py",
        "patchSetId": 11
      },
      "lineNbr": 58,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "This will try to find [\"Controller\"] inside nodes, not \"Controller\" but the list variable. Is this correct?",
      "range": {
        "startLine": 58,
        "startChar": 63,
        "endLine": 58,
        "endChar": 77
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_535e7b46",
        "filename": "yardstick/benchmark/contexts/node.py",
        "patchSetId": 11
      },
      "lineNbr": 58,
      "author": {
        "id": 6831
      },
      "writtenOn": "2017-10-24T18:23:56Z",
      "side": 1,
      "message": "no, the list defined here is treated as a set within the method iter_nodes_of_role, the second argument named \"node_role_set\".  this argument is then used in the interior method \"not_contains\":\n\n def not_contains(a, b):\n    return b not in a\n\nand used:\n\n not_contains(node_role_set, node.get(\u0027role\u0027, \u0027\u0027))\n\nand thereby expanded to:\n\n return node.get(\u0027role\u0027, \u0027\u0027) not in node_role_set\n\nor as this statement wants:\n\n return node.get(\u0027role\u0027, \u0027\u0027) not in [\u0027Controller\u0027]\n\ncontains is similar:\n\n \u003e\u003e\u003e help(operator.contains)\n Help on built-in function contains in module _operator:\n\n contains(...)\n     contains(a, b) -- Same as b in a (note reversed operands).\n\n\"a\" is \"node_role_set\" and \"b\" is \"node.get(\u0027role\u0027, \u0027\u0027)\".",
      "parentUuid": "9a3d3df0_f32b4f2e",
      "range": {
        "startLine": 58,
        "startChar": 63,
        "endLine": 58,
        "endChar": 77
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_33e4970c",
        "filename": "yardstick/benchmark/contexts/standalone/base.py",
        "patchSetId": 11
      },
      "lineNbr": 75,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "I don\u0027t understand. If this is not needed, why?",
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_932f63a1",
        "filename": "yardstick/benchmark/contexts/standalone/base.py",
        "patchSetId": 11
      },
      "lineNbr": 75,
      "author": {
        "id": 6831
      },
      "writtenOn": "2017-10-24T18:23:56Z",
      "side": 1,
      "message": "i am sure this is a copy-paste oversight.  L75 should be removed or changed.",
      "parentUuid": "9a3d3df0_33e4970c",
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_b3942738",
        "filename": "yardstick/benchmark/contexts/standalone/base.py",
        "patchSetId": 11
      },
      "lineNbr": 138,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "This logic is quite complex, based in exceptions and could be simplified, in spite of creating an intermediate variable.\n\n\nmatching_nodes \u003d [n for n in self.nodes if n[\"name\"] \u003d\u003d node_name]\nif len(matching_nodes) \u003d\u003d 0:\n  return None\nif len(matching_nodes) \u003e 1:\n  raise ValueError(\"Duplicate nodes\")\n\nnode \u003d dict(matching_nodes[0])\nnode[\"name\"] \u003d attr_name\nreturn node",
      "range": {
        "startLine": 121,
        "startChar": 7,
        "endLine": 138,
        "endChar": 19
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_73aa9f71",
        "filename": "yardstick/benchmark/contexts/standalone/base.py",
        "patchSetId": 11
      },
      "lineNbr": 169,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "Do you need to create a new object by copying the entire dict? Do you need to have this ordered?",
      "range": {
        "startLine": 169,
        "startChar": 43,
        "endLine": 169,
        "endChar": 54
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_13deb33f",
        "filename": "yardstick/benchmark/contexts/standalone/model.py",
        "patchSetId": 11
      },
      "lineNbr": 239,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "for pkg in (pkg for pkg in pkgs if pkg not in seen):",
      "range": {
        "startLine": 237,
        "startChar": 4,
        "endLine": 239,
        "endChar": 20
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_732c5fac",
        "filename": "yardstick/benchmark/contexts/standalone/model.py",
        "patchSetId": 11
      },
      "lineNbr": 239,
      "author": {
        "id": 6831
      },
      "writtenOn": "2017-10-24T18:23:56Z",
      "side": 1,
      "message": "i consider doing this, but i\u0027m never sure how well it is received.  and better yet, would be a helper iterator that would hold the \"seen\" set and filter for us:\n\n class SeenFilter(object):\n\n     def __init__(self, iterable, watch_index\u003d0):\n         super(SeenFilter, self).__init__()\n         self.watch_index \u003d watch_index\n         self.seen \u003d set()\n         self.iterable \u003d filter(self.predicate, iterable)\n\n     def clear(self):\n         return self.seen.clear()\n\n     def predicate(self, value):\n         try:\n             return self._add(value[self.watch_index])\n         except TypeError:\n             return self._add(value)\n\n     def _add(self, other):\n         try:\n             return other not in self.seen\n         finally:\n             self.seen.add(other)\n\n     def __iter__(self):\n         return self\n\n     def __next__(self):\n         return next(self.iterable)\n\nthen here:\n\n for pkg in SeenFilter(pkgs):\n   if connection.execute(...)[0]:\n     ...",
      "parentUuid": "9a3d3df0_13deb33f",
      "range": {
        "startLine": 237,
        "startChar": 4,
        "endLine": 239,
        "endChar": 20
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_f3e22f02",
        "filename": "yardstick/benchmark/contexts/standalone/model.py",
        "patchSetId": 11
      },
      "lineNbr": 442,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "As in [1], this could be\n\ncmd \u003d (\"sudo -E %s --ovs\u003d\u0027%s\u0027 --dpdk\u003d\u0027%s\u0027 -p\u003d\u0027%s\u0027\" %\n       (remote_ovs_deploy, ovs, dpdk, http_proxy))\n\n[1] https://www.python.org/dev/peps/pep-0008/#should-a-line-break-before-or-after-a-binary-operator",
      "range": {
        "startLine": 441,
        "startChar": 8,
        "endLine": 442,
        "endChar": 55
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_53e79b12",
        "filename": "yardstick/benchmark/contexts/standalone/ovs_dpdk.py",
        "patchSetId": 11
      },
      "lineNbr": 32,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "Triple quoted strings are almost exclusively used only for documentation.\n\nThis could be broken in two lines:\nOVS_ADD_PORT_TEMPLATE \u003d (\"ovs-vsctl add-port {br} {port} -- set Interface {port} \"\n                         \"type\u003d{type_}{dpdk_args}\")",
      "range": {
        "startLine": 32,
        "startChar": 24,
        "endLine": 32,
        "endChar": 27
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_d3ba8be0",
        "filename": "yardstick/benchmark/contexts/standalone/ovs_dpdk.py",
        "patchSetId": 11
      },
      "lineNbr": 95,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "If the vm is not deployed, self.dpdk_bind_helper is no declared.",
      "range": {
        "startLine": 95,
        "startChar": 13,
        "endLine": 95,
        "endChar": 29
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_f317cf4f",
        "filename": "yardstick/benchmark/contexts/standalone/ovs_dpdk.py",
        "patchSetId": 11
      },
      "lineNbr": 95,
      "author": {
        "id": 6831
      },
      "writtenOn": "2017-10-24T18:23:56Z",
      "side": 1,
      "message": "agreed, though it seems to me that many of these methods should be marked as protected/private.  specific_deploy should only be called \"during or after\" deploy.\n\nof course, we could protective checks in each of these methods to test whether the vm was deployed.  i\u0027m not sure the best way to do as requested in the case that the vm was not deployed, current raising an exception is the reaction.\n\ncan we make dpdk_bind_helper a property and make the SSH connection on demand?  will this work with pre-deployed vms?",
      "parentUuid": "9a3d3df0_d3ba8be0",
      "range": {
        "startLine": 95,
        "startChar": 13,
        "endLine": 95,
        "endChar": 29
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_b3bf07d0",
        "filename": "yardstick/benchmark/contexts/standalone/ovs_dpdk.py",
        "patchSetId": 11
      },
      "lineNbr": 145,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "dpdk_args \u003d \" options:dpdk-devargs\u003d{}\" if ovs_ver \u003e\u003d [2, 7, 0] else \"\"",
      "range": {
        "startLine": 142,
        "startChar": 8,
        "endLine": 145,
        "endChar": 26
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_13b513ee",
        "filename": "yardstick/benchmark/contexts/standalone/ovs_dpdk.py",
        "patchSetId": 11
      },
      "lineNbr": 147,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "Why? You are going to overwrite it in L148.",
      "range": {
        "startLine": 147,
        "startChar": 8,
        "endLine": 147,
        "endChar": 18
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_b31d4776",
        "filename": "yardstick/benchmark/contexts/standalone/ovs_dpdk.py",
        "patchSetId": 11
      },
      "lineNbr": 147,
      "author": {
        "id": 6831
      },
      "writtenOn": "2017-10-24T18:23:56Z",
      "side": 1,
      "message": "actually that is incorrect:\n\n \u003e\u003e\u003e i \u003d -1\n \u003e\u003e\u003e for i in enumerate([]):\n ...   print(i)\n ...\n \u003e\u003e\u003e i\n -1\n\nif there is nothing to enumerate, then \"i\" is not defined by the for loop:\n\n \u003e\u003e\u003e i\n Traceback (most recent call last):\n   File \"\u003cstdin\u003e\", line 1, in \u003cmodule\u003e\n NameError: name \u0027i\u0027 is not defined\n \u003e\u003e\u003e for i in enumerate([]):\n ...   print(i)\n ...\n \u003e\u003e\u003e i\n Traceback (most recent call last):\n   File \"\u003cstdin\u003e\", line 1, in \u003cmodule\u003e\n NameError: name \u0027i\u0027 is not defined\n \u003e\u003e\u003e",
      "parentUuid": "9a3d3df0_13b513ee",
      "range": {
        "startLine": 147,
        "startChar": 8,
        "endLine": 147,
        "endChar": 18
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_d34d6b74",
        "filename": "yardstick/common/utils.py",
        "patchSetId": 11
      },
      "lineNbr": 40,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "nit: it\u0027s usually better to import the whole module and then use the object inside it, just for documentation purposes:\n\nL400:  alt_path \u003d constants.YARDSTICK_ROOT_PATH",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 58
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_f3734faf",
        "filename": "yardstick/common/utils.py",
        "patchSetId": 11
      },
      "lineNbr": 41,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "ditto",
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_9362c3d6",
        "filename": "yardstick/common/utils.py",
        "patchSetId": 11
      },
      "lineNbr": 400,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "alt_path \u003d alt_path or YARDSTICK_ROOT_PATH",
      "range": {
        "startLine": 399,
        "startChar": 8,
        "endLine": 400,
        "endChar": 42
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_b330a757",
        "filename": "yardstick/common/utils.py",
        "patchSetId": 11
      },
      "lineNbr": 400,
      "author": {
        "id": 1402
      },
      "writtenOn": "2017-10-24T15:27:07Z",
      "side": 1,
      "message": "I think somewhere we decided on preferring  if else ternary to \u0027or\u0027.\n\nthere was some suggestion that c \u003d a or b might start returning boolean instead of the objects themselves.",
      "parentUuid": "9a3d3df0_9362c3d6",
      "range": {
        "startLine": 399,
        "startChar": 8,
        "endLine": 400,
        "endChar": 42
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_b3c1c7e6",
        "filename": "yardstick/common/utils.py",
        "patchSetId": 11
      },
      "lineNbr": 400,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T16:49:46Z",
      "side": 1,
      "message": "This is valid for this operation [1] without any problem. And this is the \"phytonic\" way along with the ternary operator. But if/else is not needed here because the condition to evaluate is the variable itself.\n\n[1] https://stackoverflow.com/questions/6704711/best-way-to-do-conditional-assignment-in-python",
      "parentUuid": "9a3d3df0_b330a757",
      "range": {
        "startLine": 399,
        "startChar": 8,
        "endLine": 400,
        "endChar": 42
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_337497ce",
        "filename": "yardstick/common/utils.py",
        "patchSetId": 11
      },
      "lineNbr": 400,
      "author": {
        "id": 1402
      },
      "writtenOn": "2017-10-24T17:10:05Z",
      "side": 1,
      "message": "I was deferring to Hettinger\u0027s style.\n\n\nhttps://mail.python.org/pipermail/python-dev/2005-September/056510.html\nOn 9/19/05, Raymond Hettinger \u003craymond.hettinger at verizon.net\u003e wrote: \n\n\u003e I propose that in Py3.0, the \"and\" and \"or\" operators be simplified to always return a Boolean value instead of returning the last evaluated argument.",
      "parentUuid": "9a3d3df0_b3c1c7e6",
      "range": {
        "startLine": 399,
        "startChar": 8,
        "endLine": 400,
        "endChar": 42
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_d3bc4b6f",
        "filename": "yardstick/common/utils.py",
        "patchSetId": 11
      },
      "lineNbr": 400,
      "author": {
        "id": 6831
      },
      "writtenOn": "2017-10-24T18:23:56Z",
      "side": 1,
      "message": "i tend to write the specifically for None, such that the empty string, or sometimes 0 or [] or {}, is not replaced by the default.\n\nalso, the conditional operator and \"or\" behavior are not recognized by the coverage package as branches, should branches ever be a criteria of coverage.",
      "parentUuid": "9a3d3df0_b330a757",
      "range": {
        "startLine": 399,
        "startChar": 8,
        "endLine": 400,
        "endChar": 42
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_b3a0a7f5",
        "filename": "yardstick/common/utils.py",
        "patchSetId": 11
      },
      "lineNbr": 402,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "The parent class is \"object\", there is no need to call super.",
      "range": {
        "startLine": 402,
        "startChar": 8,
        "endLine": 402,
        "endChar": 47
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_f3aa2fd3",
        "filename": "yardstick/common/utils.py",
        "patchSetId": 11
      },
      "lineNbr": 405,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "self.alt_path \u003d alt_path or YARDSTICK_ROOT_PATH\n\nAnd deleting L399-400",
      "range": {
        "startLine": 405,
        "startChar": 8,
        "endLine": 405,
        "endChar": 32
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_53af9be3",
        "filename": "yardstick/common/utils.py",
        "patchSetId": 11
      },
      "lineNbr": 410,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "self.mode \u003d mode or \u0027r\u0027",
      "range": {
        "startLine": 407,
        "startChar": 8,
        "endLine": 410,
        "endChar": 28
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_93900397",
        "filename": "yardstick/common/utils.py",
        "patchSetId": 11
      },
      "lineNbr": 413,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "Instead of trying to open directly a file, we can test if it already exists.\n\nYou can create a property:\n\n  @property\n  def path(self):\n    if not self._path:\n      self._path \u003d os.path.abspath(self.base_path)\n      if not os.path.exists(self._path):\n        self._path \u003d os.path.abspath(os.path.join(self.alt_path, self.base_path))\n      if not os.path.exists(self._path):\n        return \u003csome handmade exception or errno.ENOENT\u003e\n\n    return self._path\n\nThen _open() will be only a simple try/catch function, without calling open again in the except branch.",
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_93f2c398",
        "filename": "yardstick/common/utils.py",
        "patchSetId": 11
      },
      "lineNbr": 413,
      "author": {
        "id": 1402
      },
      "writtenOn": "2017-10-24T15:27:07Z",
      "side": 1,
      "message": "path.exists isn\u0027t quite the same as open.\n\nchecking with stat() or access() won\u0027t resolve permissions correctly and won\u0027t ensure read access.\n\nthe only real way to ensure a file can be opened is to open it with the open() syscall and checking errno.\n\nI think this was added based on one of the old Linux secure programming/filesystem race documents.",
      "parentUuid": "9a3d3df0_93900397",
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_9393e3f9",
        "filename": "yardstick/common/utils.py",
        "patchSetId": 11
      },
      "lineNbr": 413,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T16:49:46Z",
      "side": 1,
      "message": "I\u0027m not suggesting to replace open(). But the the first try (L415) is just to check if the file is there and then, if not, format the new path and then open again in L421. IMO, the suggested code is cleaner.\n\nBTW, and this is important: what is returned in L416, in self.handle, is the open file. But it will be close out of this scope:\n\n\nclass TestClass():\n\n    def _open(self):\n        with open(\u0027/opt/stack/test.py\u0027) as self.fp:\n            yield\n\n    def __enter__(self):\n        _iter \u003d self._open()\n        next(_iter)\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print(\"bye\")\n\na \u003d TestClass()\nwith a as _class:\n    z \u003d yaml.load(_class.fp)  # At this point, _class.fp is closed!!!\n    print(z)",
      "parentUuid": "9a3d3df0_93f2c398",
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_738d7f7b",
        "filename": "yardstick/common/utils.py",
        "patchSetId": 11
      },
      "lineNbr": 421,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "The mode is missing",
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_7300dfaa",
        "filename": "yardstick/common/utils.py",
        "patchSetId": 11
      },
      "lineNbr": 424,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "There is no need to call _open() or create an interator.\n\nThis could be easier:\n  def __enter__(self):\n    self.fp \u003d open(file)\n    return self      # or maybe just self.fp\n\n\n  def __exit__(self):\n    self.fp.close()\n\n  ....\n\n  with FilePathWrapper_variable() as wrapper:\n    var \u003d yaml.loader(wrapper)  # with \"return self.fp\"",
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_d3d3ab36",
        "filename": "yardstick/network_services/utils.py",
        "patchSetId": 11
      },
      "lineNbr": 55,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "Why this numbers?",
      "range": {
        "startLine": 53,
        "startChar": 12,
        "endLine": 55,
        "endChar": 17
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_931ac315",
        "filename": "yardstick/network_services/utils.py",
        "patchSetId": 11
      },
      "lineNbr": 65,
      "author": {
        "id": 7075
      },
      "writtenOn": "2017-10-24T14:51:04Z",
      "side": 1,
      "message": "Instead of reversing, you can define sequence (in \"make_random\") in the correct order",
      "range": {
        "startLine": 65,
        "startChar": 67,
        "endLine": 65,
        "endChar": 85
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a3d3df0_33093732",
        "filename": "yardstick/network_services/utils.py",
        "patchSetId": 11
      },
      "lineNbr": 65,
      "author": {
        "id": 6831
      },
      "writtenOn": "2017-10-24T18:23:56Z",
      "side": 1,
      "message": "sequence is meant to be human-readable, as in:\n\n list(int(x, 16) for x in \"de:ad:be:ef:01:89\".split(\":\"))\n\nor\n\n [0xde, 0xad, 0xbe, 0xef, 0x01, 0x89]\n\nbut this is most significant first and math works in the reverse order: least significant first.\n\nideally, enumerate would have a decrement variant, then we could use that flavor of enumerate and avoid reversed.\n\ni suppose we could zip \"sequence\" with \"range(5, -1, -1)\" and get it.\n\n return cls(sum(int(v) * 2 ** (i * 8) for i, v in zip(range(5, -1, -1), sequence)))\n\nthough there are subtle variations should sequence be a list of fewer than 6 values.",
      "parentUuid": "9a3d3df0_931ac315",
      "range": {
        "startLine": 65,
        "startChar": 67,
        "endLine": 65,
        "endChar": 85
      },
      "revId": "1aeae8fbfa3f6f49089eb8c537ea23e039dc002e",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    }
  ]
}