#!/bin/bash

##############################################################################
# Copyright (c) 2015 Ericsson AB and others.
#
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
##############################################################################

# yardstick-img-modify - download and modify a Ubuntu cloud image
#
# The actual customization is done by a script passed with an absolute path as
# the only single argument. The command needs to be invoked as sudo
#
# Example invocation:
# yardstick-img-modify /home/yardstick/tools/ubuntu-server-cloudimg-modify.sh
#
# Warning: the script will create files by default in:
#   /tmp/workspace/yardstick
# the files will be owned by root!
#
# TODO: image resize is needed if the base image is too small
#
set -e
set -x

die() {
    echo "error: $1" >&2
    exit 1
}

test $# -eq 1 -o $# -eq 2 || die "no image specific script as argument"
test $(id -u) -eq 0 || die "should invoke using sudo"

cmd=$1
RELEASE=$2
test -x $cmd
mountdir="/mnt/yardstick"
workspace=${WORKSPACE:-"/tmp/workspace/yardstick"}
host=${HOST:-"cloud-images.ubuntu.com"}
CLOUD_RELEASE="xenial"
boot_mode="uefi1"
arch="arm64"
release=${CLOUD_RELEASE}
image_path="${release}/current/${release}-server-cloudimg-${YARD_IMG_ARCH}-${boot_mode}.img"
image_url=${IMAGE_URL:-"https://${host}/${image_path}"}
md5sums_path="${release}/current/MD5SUMS"
md5sums_url=${MD5SUMS_URL:-"https://${host}/${md5sums_path}"}

imgfile="${workspace}/yardstick-image.img"
raw_imgfile_name="yardstick-${CLOUD_RELEASE}-server.raw"
raw_imgfile="${workspace}/yardstick-${release}-server.raw"
filename=$(basename $image_url)

# download and checksum base image, conditionally if local copy is outdated
download() {
    test -d $workspace || mkdir -p $workspace
    cd $workspace
    rm -f MD5SUMS # always download the checksum file to a detect stale image
    wget $md5sums_url
    test -e $filename || wget -nc --progress=dot:giga $image_url
    grep $filename MD5SUMS | md5sum -c ||
    if [ $? -ne 0 ]; then
        rm $filename
        wget -nc --progress=dot:giga $image_url
        grep $filename MD5SUMS | md5sum -c
    fi

    for i in $(seq 0 9); do
        [ -a /dev/loop$i ] || mknod -m 660 /dev/loop$i b 7 $i
    done

    if [[ $YARD_IMG_ARCH = "arm64"  && $CLOUD_RELEASE = "vivid" ]]; then
        cd /tmp
        if [ ! -f /tmp/${CLOUD_RELEASE}-server-cloudimg-arm64-kernel-info.txt ]; then
            wget http://cloud-images.ubuntu.com/${CLOUD_RELEASE}/current/${CLOUD_RELEASE}-server-cloudimg-arm64-kernel-info.txt
        fi
        export CLOUD_KERNEL_VERSION=$(cut -d$'\t' -f4 ${CLOUD_RELEASE}-server-cloudimg-arm64-kernel-info.txt)

        mkdir -p /tmp/${CLOUD_RELEASE}-modules
        if [ ! -f "/tmp/${CLOUD_RELEASE}-server-cloudimg-arm64.tar.gz" ]; then
            wget $CLOUD_IMG_URL
        fi
        if [ ! -f "/tmp/${CLOUD_RELEASE}-server-cloudimg-arm64.img" ]; then
            tar zxvf ${CLOUD_RELEASE}-server-cloudimg-arm64.tar.gz ${CLOUD_RELEASE}-server-cloudimg-arm64.img
        fi
        mkdir -p /mnt/${CLOUD_RELEASE}
        mount /tmp/${CLOUD_RELEASE}-server-cloudimg-arm64.img /mnt/${CLOUD_RELEASE}
        cp -r /mnt/${CLOUD_RELEASE}/lib/modules/$(echo $UBUNTU_KERNEL_VERSION) /tmp/${CLOUD_RELEASE}-modules
        umount /mnt/${CLOUD_RELEASE}
        rm /tmp/${CLOUD_RELEASE}-server-cloudimg-arm64.img
        cd $workspace
    fi
    qemu-img convert $filename $raw_imgfile
    cd -
}

# mount image
setup() {
    # qemu-img resize $raw_imgfile +5GB
    if [ $YARD_IMG_ARCH = "arm64" ]; then
        echo -e "d\nn\np\n1\n\n\nw" | parted -l $raw_imgfile
    fi
    mkdir -p $mountdir
    cd ${workspace}
    loopdevice=$(kpartx -l $raw_imgfile_name | head -1 | cut -f1 -d ' ')

    kpartx -av $raw_imgfile_name
    cd -
    if [[ $YARD_IMG_ARCH = "arm64" && $CLOUD_RELEASE = "vivid" ]]; then
        e2fsck -p -f /dev/mapper/$loopdevice
        resize2fs /dev/mapper/$loopdevice
    fi
    # for trouble shooting
    sleep 2
    dmsetup ls
    parted -l /dev/${loopdevice:0:5} || true
    mount /dev/mapper/$loopdevice $mountdir
    mount -t proc none $mountdir/proc

    if [[ $YARD_IMG_ARCH = "arm64" && $CLOUD_RELEASE = "vivid" ]]; then
        cp -r /tmp/${CLOUD_RELEASE}-modules/$(echo $UBUNTU_KERNEL_VERSION) "$mountdir/lib/modules"
        cp $(which "qemu-aarch64-static") "$mountdir/usr/bin"
    fi
    cp $cmd $mountdir/$(basename $cmd)
}

# modify image running a script using in a chrooted environment
modify() {
    # resolv.conf does not exist in base image, pass nameserver value from host
    nameserver_ip=$(grep -m 1 '^nameserver' \
        /etc/resolv.conf | awk '{ print $2 '})

    # prevent init scripts from running during install
    echo $'#!/bin/sh\nexit 101' >$mountdir/usr/sbin/policy-rc.d
    chmod a+x $mountdir/usr/sbin/policy-rc.d

    chroot $mountdir /$(basename $cmd) $nameserver_ip

    rm -rf $mountdir/usr/sbin/policy-rc.d

    umount -f $mountdir/proc
    umount $mountdir

    qemu-img convert -c -o compat=0.10 -O qcow2 $raw_imgfile $imgfile

    if dmsetup table | grep $loopdevice; then
       dmsetup clear $loopdevice || true
    fi
}

# cleanup (umount) the image
cleanup() {
    # designed to be idempotent
    mount | grep $mountdir/proc && umount $mountdir/proc
    mount | grep $mountdir && umount $mountdir
    mount | grep "/mnt/${CLOUD_RELEASE}" && umount "/mnt/${CLOUD_RELEASE}"

    if [ -f $raw_imgfile ]; then
        #kpartx -dv $raw_imgfile sometimes failed, we should checked it agein.
        #if [ -z "$(kpartx -l $raw_imgfile | grep 'loop deleted')" ]; then
        #    kpartx -dv $raw_imgfile
        #fi
        kpartx -dv $raw_imgfile || true
    fi

    rm -f $raw_imgfile
    rm -rf $mountdir
}

exitcode=""
error_trap()
{
    local rc=$?

    set +e

    if [ -z "$exitcode" ]; then
        exitcode=$rc
    fi

    dmesg -T | tail -50

    cleanup

    echo "Image build failed with $exitcode"

    exit $exitcode
}

main() {
    cleanup

    trap "error_trap" EXIT SIGTERM

    download
    setup
    modify

    trap - EXIT SIGTERM
    cleanup

    echo "the modified image is found here: $imgfile"
}

main

