{
  "comments": [
    {
      "key": {
        "uuid": "5a3f45e8_e1e03efc",
        "filename": "etc/yardstick/nodes/apex_baremetal/pod.yaml",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 334
      },
      "writtenOn": "2018-04-12T15:09:17Z",
      "side": 1,
      "message": "why do you only care about member-0?  member-0 is not guaranteed to be leader of the cluster.",
      "range": {
        "startLine": 42,
        "startChar": 3,
        "endLine": 42,
        "endChar": 15
      },
      "revId": "6717985ef428f6ed8f2a9ec4664dfc530d055092",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3f45e8_3c27edcb",
        "filename": "etc/yardstick/nodes/apex_baremetal/pod.yaml",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 6745
      },
      "writtenOn": "2018-04-13T05:37:57Z",
      "side": 1,
      "message": "Hmm yeah you are right. I am trying to find an effective way to kill the most significant ODL node in the cluster for my testcase so I can observe how different things behave when the the most important ODL node is down. I think the member-0 is the most important ODL node. Maybe it is not the Leader of the cluster all the time but this is something we cannot determine because IMHO different module-shards can have different Leaders. So How are we gonna take a decision of which ODL is the most significant if the different module-shards have different leaders.\n\nSo I thought that to kill the member-0 ODL it would be a compromise that could work for the testcase.\n\nWhat do you think? Can you please tell me your opinion on that?\nIf you have anything to propose please do.",
      "parentUuid": "5a3f45e8_e1e03efc",
      "range": {
        "startLine": 42,
        "startChar": 3,
        "endLine": 42,
        "endChar": 15
      },
      "revId": "6717985ef428f6ed8f2a9ec4664dfc530d055092",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3f45e8_7c2df5a7",
        "filename": "etc/yardstick/nodes/apex_baremetal/pod.yaml",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 6745
      },
      "writtenOn": "2018-04-13T05:42:13Z",
      "side": 1,
      "message": "Another thing that we can use as alternative is to try to find dynamically the leader of the default shard. But this doesn\u0027t mean that the rest of teh module-shards will have the same leader. What do you think?",
      "parentUuid": "5a3f45e8_3c27edcb",
      "range": {
        "startLine": 42,
        "startChar": 3,
        "endLine": 42,
        "endChar": 15
      },
      "revId": "6717985ef428f6ed8f2a9ec4664dfc530d055092",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3f45e8_d6918548",
        "filename": "etc/yardstick/nodes/apex_baremetal/pod.yaml",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 334
      },
      "writtenOn": "2018-04-13T15:31:12Z",
      "side": 1,
      "message": "This totally depends on how you shard the database into modules.  For OOO/Apex we only use a default shard/module, so there is only a single leader of the entire database.  I think you need to use the proper REST call in order to determine who is the leader of the cluster for the default shard and then kill that one.  It doesn\u0027t need to be hardcoded in this yaml.  It can be found quite easily with python urllib in yardstick code, by querying each OS control node (since ODL runs on control node).",
      "parentUuid": "5a3f45e8_7c2df5a7",
      "range": {
        "startLine": 42,
        "startChar": 3,
        "endLine": 42,
        "endChar": 15
      },
      "revId": "6717985ef428f6ed8f2a9ec4664dfc530d055092",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3f45e8_36254909",
        "filename": "etc/yardstick/nodes/apex_baremetal/pod.yaml",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 6745
      },
      "writtenOn": "2018-04-13T16:07:53Z",
      "side": 1,
      "message": "I would like to have the information in this pod.yaml file because the yardstick testcases assume that there will be a pod.yaml file and in general the codebase of yardstick is dependent on those pod.yaml files and it will be like too much effort to change right now the whole yardstick code to do this. Also I think now is not hardcoded but dynamic because I am using rest calls to get the information about the Leader. Anyway I think with the latest code in this patch we get the Leader ODL info quite dynamic. what do you think ?",
      "parentUuid": "5a3f45e8_d6918548",
      "range": {
        "startLine": 42,
        "startChar": 3,
        "endLine": 42,
        "endChar": 15
      },
      "revId": "6717985ef428f6ed8f2a9ec4664dfc530d055092",
      "serverId": "bbac25d2-bf60-4904-9ba8-a72fc000d6c5",
      "unresolved": false
    }
  ]
}